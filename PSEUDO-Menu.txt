CLASS: Menu

SUBMODULE: mainMenu
IMPORT: None
EXPORT: exitMenu (boolean)
ASSERTION: provides the main menu for the program
ALGORITHM:
   exitMenu := false
   selectAction = selectInput <-- 1,4
   CASE selectAction
      1:
         addEventMenu <-- None
      2:
         ScheduleList.displayEvents <-- None
      3:
         ScheduleList.printAlert <-- None
      4:
         exitMenu = true

PRIVATE SUBMODULE: addEventMenu 
IMPORT: None
EXPORT: None
ASSERTION: provides options to add a lecture or tutorial
ALGORITHM:
   selectAction = selectInput <-- 1, 3
   CASE selectAction
      1:
         addLecture <-- None
      2:
         addTutorial <-- None
      3:
         mainMenu <-- None

PRIVATE SUBMODULE: addLecture
IMPORT: None
EXPORT: None
ASSERTION: user input contructed into a LectureEvent object and
           added to ScheduleList as an ISchedule object 
ALGORITHM:
   valid := false
   DO
      TRY
         INPUT unit (string)
         INPUT lectureHall (string)
         INPUT day, month, year, hour, minute (integers)
         CONSTRUCT event (LectureEvent) USING unit, lectureHall, day, 
                                              month, year, hour, minute
      CATCH IllegalArgument e 
         OUTPUT e.getMessage <-- None
      END TRY
   WHILE NOT valid
   ScheduleList.addEvent <-- event (As an ISchedule object)
   addEventMenu <-- None

PRIVATE SUBMODULE: addTutorial
IMPORT: None
EXPORT: None
ASSERTION: user input constructed into a TutorialEvent object and
           added to ScheduleList as an ISchedule object
ALGORITHM:
   valid := false
   DO
      TRY
         INPUT unit (string)
         INPUT classroom (integer)
         INPUT day, month, year, hour, minute (integers)
         CONSTRUCT event (TutorialEvent) USING unit, classroom, day, month,
                                               month, year, hour, minute
      CATCH IllegalArguement e 
         OUTPUT e.getMessage <-- None
      END TRY
   WHILE NOT valid
   ScheduleList.addEvent <-- event (As an ISchedule object)
   addEventMenu <-- None

PRIVATE SUBMODULE: selectInput
IMPORT: lowerBound (integer), upperBound (integer)
EXPORT: selectAction (integer)
ASSERTION: Makes sure selection input is valid
ALGORITHM:
   INPUT selectAction
   WHILE selectAction < lowerBound OR > upperBound DO
      OUTPUT "Invalid Selection: "
             "must be between " + upperBound + " and " + lowerBound
      INPUT selectAction    
   END WHILE


   


